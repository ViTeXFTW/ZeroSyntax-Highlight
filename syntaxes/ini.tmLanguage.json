{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ini",
	"patterns": [
		{
			"include": "#inline-comment"
		},
		{
			"include": "#Object-Class"
		}
	],
	"repository": {
		"Object-Class": {
			"begin": "(^[ \\t]+)?(Object)[ \\t]+([a-zA-Z_][\\w%]*)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				},
				"3": {
					"name": "entity.name.type.class.ini"
				}
			},
			"end": "(^[ \\t]+)?([Ee]nd|END)",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				}
			},
			"patterns": [
				{
					"include": "#Inline-Comment"
				},
				{
					"include": "#Object-AddModule"
				},
				{
					"include": "#Object-RemoveModule"
				},
				{
					"include": "#Locomotor-Assignment"
				},
				{
					"include": "#General-Assignment"
				},
				{
					"include": "#Invalid-Assignment"
				}
			]
		},
		"Object-AddModule": {
			"begin": "(^[ \\t]+)?([Aa]dd[Mm]odule)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				}
			},
			"end": "(^[ \\t]+)?([Ee]nd|END)",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				}
			},
			"patterns": [
				{
					"include": "#Inline-Comment"
				},
				{
					"include": "#Object-DrawModule"
				},
				{
					"include": "#Locomotor-Assignment"
				},
				{
					"include": "#General-Assignment"
				},
				{
					"include": "#Invalid-Assignment"
				}
			]
		},
		"Object-RemoveModule": {
			"match": "(^[ \\t]+)?(RemoveModule)([ \\t]+)([a-zA-Z_][\\w%]*)",
			"captures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				},
				"3": {
					"name": "punctuation.whitespace.ini"
				},
				"4": {
					"name": "storage.type.ini"
				}
			}
		},
		"Object-DrawModule": {
			"begin": "(^[ \\t]+)?\\b(Draw|DRAW)\\b",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				}
			},
			"end": "(^[ \\t]+)?([Ee]nd|END)",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "keyword.control.ini"
				}
			},
			"patterns": [
				{
					"match": "[ \\t]+",
					"name": "punctuation.whitespace.ini"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.ini"
				},
				{
					"begin": "\\b(W|W3|W3D|W3D[a-zA-Z]*)\\b",
					"beginCaptures": {
						"0": {
							"name": "entity.name.function.ini"
						}	
					},
					"end": "$",
					"patterns": [
						{
							"match": "[ \\t]+",
							"name": "punctuation.whitespace.ini"
						},
						{
							"match": "[a-zA-Z_]\\w*",
							"name": "storage.type.ini"
						},
						{
							"include": "#Inline-Comment"
						}
					]
				},
				{
					"include": "#Inline-Comment"
				},
				{
					"include": "#General-Assignment"
				}
			]
		},
		"Invalid-Assignment": {
			"match": "(^[ \\t]+)?([^a-zA-Z_]\\w*)",
			"captures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "invalid.illegal.assignment.ini"
				}
			}
		},
		"Locomotor-Assignment": {
			"begin": "(^[ \\t]+)?\\b([Ll]ocomotor)\\b([ \\t]+)(=)([ \\t]+)([A-Z_]+)",
			"captures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "variable.name.ini"
				},
				"3": {
					"name": "punctuation.whitespace.ini"	
				},
				"4": {
					"name": "keyword.operator.assignment.ini"
				},
				"5": {
					"name": "punctuation.whitespace.ini"
				},
				"6": {
					"name": "variable.other.constant.ini"
				}
			},
			"end": "$",
			"patterns": [
				{
					"match": "[ \\t]+",
					"name": "punctuation.whitespace.ini"
				},
				{
					"match": "[^a-zA-Z_]\\w*",
					"name": "invalid.illegal.locomotortype.ini"
				},
				{
					"include": "#String"
				}
			]
		},
		"General-Assignment": {
			"begin": "(^[ \\t]+)?([a-zA-Z_][\\w%]*)",
			"captures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				},
				"2": {
					"name": "variable.name.ini"
				}
			},
			"end": "$",
			"patterns": [
				{
					"match": "[ \\t]+",
					"name": "punctuation.whitespace.ini"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.ini"
				},
				{
					"include": "#WeaponSlot-Keywords"
				},
				{
					"include": "#Value"
				}
			]
		},
		"WeaponSlot-Keywords": {
			"patterns": [
				{
					"match": "\\b(PRIMARY|SECONDARY|TERTIARY)\\b\\s*[\\d%]+",
					"name": "invalid.illegal.assignment-keywords.ini"
				},
				{
					"match": "\\b(PRIMARY|SECONDARY|TERTIARY)\\b\\s*[!%#]",
					"name": "invalid.illegal.assignment-keywords.ini"
				},
				{
					"match": "\\b(PRIMARY|SECONDARY|TERTIARY)\\b",
					"name": "variable.other.constant.ini"
				}
			]
		},
		"Value": {
			"patterns": [
				{
					"include": "#Inline-Comment"
				},
				{
					"include": "#Invalid-Value"
				},
				{
					"include": "#Number"
				},
				{
					"include": "#Boolean"
				},
				{
					"include": "#String"
				}
			]
		},
		"Invalid-Value": {
			"match": "[^a-zA-Z_\\d\\-\"'\\.].*",
			"name": "invalid.illegal.value.ini"
		},
		"String": {
			"patterns": [
				{
					"match": "\".*?\"",
					"name": "string.quoted.double.ini"
				},
				{
					"match": "'.*?'",
					"name": "string.quoted.single.ini"
				},
				{
					"match": "[a-zA-Z_]\\w*",
					"name": "string.unquoted.ini"
				}
			]
		},
		"Number": {
			"patterns": [
				{
					"match": "-?\\d*\\.\\d+%",
					"name": "invalid.illegal.precentage.ini"
				},
				{
					"match": "-?\\d+(\\.\\d+)?[%fF]?",
					"name": "constant.numeric.ini"
				},
				{
					"match": "-?\\.\\d+[fF]?",
					"name": "constant.numeric.ini"
				}
			]	
		},
		"Boolean": {
			"patterns": [
				{
					"match": "[ \\t]+",
					"name": "punctuation.whitespace.ini"
				},
				{
					"match": "\\b([Tt]rue|TRUE|[Yy]es|YES)\\b",
					"name": "constant.language.boolean.true.ini"
				},
				{
					"match": "\\b([Ff]alse|FALSE|[Nn]o|NO)\\b",
					"name": "constant.language.boolean.false.ini"
				}
			]
		},
		"Inline-Comment": {
			"begin": "(^[ \\t]+)?(?=(;|//))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.ini"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": ";",
					"beginCaptures": {
						"0": {
							"name": "comment.line.semicolon.ini"
						}
					},
					"end": "\\n",
					"name": "comment.line.ini"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "comment.line.double-slash.ini"
						}
					},
					"end": "\\n",
					"name": "comment.line.ini"
				}
			]
		}
	},
	"scopeName": "source.ZH-HiLi"
}